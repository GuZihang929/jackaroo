// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: rpc/backstage.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BackstageClient is the client API for Backstage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BackstageClient interface {
	Get24P(ctx context.Context, in *PeoRequest, opts ...grpc.CallOption) (*PeoResponse, error)
	GetSeaJob(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (*JobResponse, error)
}

type backstageClient struct {
	cc grpc.ClientConnInterface
}

func NewBackstageClient(cc grpc.ClientConnInterface) BackstageClient {
	return &backstageClient{cc}
}

func (c *backstageClient) Get24P(ctx context.Context, in *PeoRequest, opts ...grpc.CallOption) (*PeoResponse, error) {
	out := new(PeoResponse)
	err := c.cc.Invoke(ctx, "/rpc.backstage/Get24p", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backstageClient) GetSeaJob(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (*JobResponse, error) {
	out := new(JobResponse)
	err := c.cc.Invoke(ctx, "/rpc.backstage/GetSeaJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackstageServer is the server API for Backstage service.
// All implementations must embed UnimplementedBackstageServer
// for forward compatibility
type BackstageServer interface {
	Get24P(context.Context, *PeoRequest) (*PeoResponse, error)
	GetSeaJob(context.Context, *JobRequest) (*JobResponse, error)
	mustEmbedUnimplementedBackstageServer()
}

// UnimplementedBackstageServer must be embedded to have forward compatible implementations.
type UnimplementedBackstageServer struct {
}

func (UnimplementedBackstageServer) Get24P(context.Context, *PeoRequest) (*PeoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get24P not implemented")
}
func (UnimplementedBackstageServer) GetSeaJob(context.Context, *JobRequest) (*JobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeaJob not implemented")
}
func (UnimplementedBackstageServer) mustEmbedUnimplementedBackstageServer() {}

// UnsafeBackstageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackstageServer will
// result in compilation errors.
type UnsafeBackstageServer interface {
	mustEmbedUnimplementedBackstageServer()
}

func RegisterBackstageServer(s grpc.ServiceRegistrar, srv BackstageServer) {
	s.RegisterService(&Backstage_ServiceDesc, srv)
}

func _Backstage_Get24P_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackstageServer).Get24P(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.backstage/Get24p",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackstageServer).Get24P(ctx, req.(*PeoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backstage_GetSeaJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackstageServer).GetSeaJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.backstage/GetSeaJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackstageServer).GetSeaJob(ctx, req.(*JobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Backstage_ServiceDesc is the grpc.ServiceDesc for Backstage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Backstage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.backstage",
	HandlerType: (*BackstageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get24p",
			Handler:    _Backstage_Get24P_Handler,
		},
		{
			MethodName: "GetSeaJob",
			Handler:    _Backstage_GetSeaJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/backstage.proto",
}
