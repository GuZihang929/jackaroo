// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	positionFieldNames          = builder.RawFieldNames(&Position{})
	positionRows                = strings.Join(positionFieldNames, ",")
	positionRowsExpectAutoSet   = strings.Join(stringx.Remove(positionFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	positionRowsWithPlaceHolder = strings.Join(stringx.Remove(positionFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cachePositionIdPrefix = "cache:position:id:"
)

type (
	positionModel interface {
		Insert(ctx context.Context, data *Position) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Position, error)
		Update(ctx context.Context, data *Position) error
		Delete(ctx context.Context, id int64) error
	}

	defaultPositionModel struct {
		sqlc.CachedConn
		table string
	}

	Position struct {
		Id          int64          `db:"id"`
		Cid         int64          `db:"cid"`
		Company     string         `db:"company"`
		Title       string         `db:"title"`
		JobCategory string         `db:"job_category"`
		JobTypeName string         `db:"job_type_name"`
		JobDetail   string 			`db:"job_detail"`
		JobLocation string         `db:"job_location"`
		PushTime    string         `db:"push_time"`
		FetchTime   string         `db:"fetch_time"`
	}
)

func newPositionModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultPositionModel {
	return &defaultPositionModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`position`",
	}
}

func (m *defaultPositionModel) withSession(session sqlx.Session) *defaultPositionModel {
	return &defaultPositionModel{
		CachedConn: m.CachedConn.WithSession(session),
		table:      "`position`",
	}
}

func (m *defaultPositionModel) Delete(ctx context.Context, id int64) error {
	positionIdKey := fmt.Sprintf("%s%v", cachePositionIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, positionIdKey)
	return err
}

func (m *defaultPositionModel) FindOne(ctx context.Context, id int64) (*Position, error) {
	positionIdKey := fmt.Sprintf("%s%v", cachePositionIdPrefix, id)
	var resp Position
	err := m.QueryRowCtx(ctx, &resp, positionIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", positionRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPositionModel) Insert(ctx context.Context, data *Position) (sql.Result, error) {
	positionIdKey := fmt.Sprintf("%s%v", cachePositionIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, positionRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Cid, data.Company, data.Title, data.JobCategory, data.JobTypeName, data.JobDetail, data.JobLocation, data.PushTime, data.FetchTime)
	}, positionIdKey)
	return ret, err
}

func (m *defaultPositionModel) Update(ctx context.Context, data *Position) error {
	positionIdKey := fmt.Sprintf("%s%v", cachePositionIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, positionRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Cid, data.Company, data.Title, data.JobCategory, data.JobTypeName, data.JobDetail, data.JobLocation, data.PushTime, data.FetchTime, data.Id)
	}, positionIdKey)
	return err
}

func (m *defaultPositionModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cachePositionIdPrefix, primary)
}

func (m *defaultPositionModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", positionRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultPositionModel) tableName() string {
	return m.table
}
