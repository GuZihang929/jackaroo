// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	companyFieldNames          = builder.RawFieldNames(&Company{})
	companyRows                = strings.Join(companyFieldNames, ",")
	companyRowsExpectAutoSet   = strings.Join(stringx.Remove(companyFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	companyRowsWithPlaceHolder = strings.Join(stringx.Remove(companyFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheCompanyIdPrefix = "cache:company:id:"
)

type (
	companyModel interface {
		Insert(ctx context.Context, data *Company) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Company, error)
		Update(ctx context.Context, data *Company) error
		Delete(ctx context.Context, id int64) error
	}

	defaultCompanyModel struct {
		sqlc.CachedConn
		table string
	}

	Company struct {
		Id      int64  `db:"id"`
		Company string `db:"company"` // 公司名称
		Number  int64  `db:"number"`
		Brief   string `db:"brief"`   // 简介
		Picture string `db:"picture"` // 图片
	}
)

func newCompanyModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultCompanyModel {
	return &defaultCompanyModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`company`",
	}
}

func (m *defaultCompanyModel) withSession(session sqlx.Session) *defaultCompanyModel {
	return &defaultCompanyModel{
		CachedConn: m.CachedConn.WithSession(session),
		table:      "`company`",
	}
}

func (m *defaultCompanyModel) Delete(ctx context.Context, id int64) error {
	companyIdKey := fmt.Sprintf("%s%v", cacheCompanyIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, companyIdKey)
	return err
}

func (m *defaultCompanyModel) FindOne(ctx context.Context, id int64) (*Company, error) {
	companyIdKey := fmt.Sprintf("%s%v", cacheCompanyIdPrefix, id)
	var resp Company
	err := m.QueryRowCtx(ctx, &resp, companyIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", companyRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCompanyModel) Insert(ctx context.Context, data *Company) (sql.Result, error) {
	companyIdKey := fmt.Sprintf("%s%v", cacheCompanyIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, companyRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Company, data.Number, data.Brief, data.Picture)
	}, companyIdKey)
	return ret, err
}

func (m *defaultCompanyModel) Update(ctx context.Context, data *Company) error {
	companyIdKey := fmt.Sprintf("%s%v", cacheCompanyIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, companyRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Company, data.Number, data.Brief, data.Picture, data.Id)
	}, companyIdKey)
	return err
}

func (m *defaultCompanyModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheCompanyIdPrefix, primary)
}

func (m *defaultCompanyModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", companyRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultCompanyModel) tableName() string {
	return m.table
}
