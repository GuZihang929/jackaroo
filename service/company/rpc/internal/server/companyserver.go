// Code generated by goctl. DO NOT EDIT.
// Source: company.proto

package server

import (
	"context"

	"jackaroo/service/company/rpc/internal/logic"
	"jackaroo/service/company/rpc/internal/svc"
	"jackaroo/service/company/rpc/types/company"
)

type CompanyServer struct {
	svcCtx *svc.ServiceContext
	company.UnimplementedCompanyServer
}

func NewCompanyServer(svcCtx *svc.ServiceContext) *CompanyServer {
	return &CompanyServer{
		svcCtx: svcCtx,
	}
}

func (s *CompanyServer) Create(ctx context.Context, in *company.CreateRequest) (*company.CreateResponse, error) {
	l := logic.NewCreateLogic(ctx, s.svcCtx)
	return l.Create(in)
}

func (s *CompanyServer) Update(ctx context.Context, in *company.UpdateRequest) (*company.UpdateResponse, error) {
	l := logic.NewUpdateLogic(ctx, s.svcCtx)
	return l.Update(in)
}

func (s *CompanyServer) Remove(ctx context.Context, in *company.RemoveRequest) (*company.RemoveResponse, error) {
	l := logic.NewRemoveLogic(ctx, s.svcCtx)
	return l.Remove(in)
}

func (s *CompanyServer) Detail(ctx context.Context, in *company.DetailRequest) (*company.DetailResponse, error) {
	l := logic.NewDetailLogic(ctx, s.svcCtx)
	return l.Detail(in)
}

func (s *CompanyServer) Refresh(ctx context.Context, in *company.RefreshRequest) (*company.RefreshResponse, error) {
	l := logic.NewRefreshLogic(ctx, s.svcCtx)
	return l.Refresh(in)
}

func (s *CompanyServer) List(ctx context.Context, in *company.ListRequest) (*company.ListResponse, error) {
	l := logic.NewListLogic(ctx, s.svcCtx)
	return l.List(in)
}
