// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: rpc/job.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SJobClient is the client API for SJob service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SJobClient interface {
	Login(ctx context.Context, in *SerchJobRequest, opts ...grpc.CallOption) (*SerchJobResponse, error)
}

type sJobClient struct {
	cc grpc.ClientConnInterface
}

func NewSJobClient(cc grpc.ClientConnInterface) SJobClient {
	return &sJobClient{cc}
}

func (c *sJobClient) Login(ctx context.Context, in *SerchJobRequest, opts ...grpc.CallOption) (*SerchJobResponse, error) {
	out := new(SerchJobResponse)
	err := c.cc.Invoke(ctx, "/rpc.SJob/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SJobServer is the server API for SJob service.
// All implementations must embed UnimplementedSJobServer
// for forward compatibility
type SJobServer interface {
	Login(context.Context, *SerchJobRequest) (*SerchJobResponse, error)
	mustEmbedUnimplementedSJobServer()
}

// UnimplementedSJobServer must be embedded to have forward compatible implementations.
type UnimplementedSJobServer struct {
}

func (UnimplementedSJobServer) Login(context.Context, *SerchJobRequest) (*SerchJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedSJobServer) mustEmbedUnimplementedSJobServer() {}

// UnsafeSJobServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SJobServer will
// result in compilation errors.
type UnsafeSJobServer interface {
	mustEmbedUnimplementedSJobServer()
}

func RegisterSJobServer(s grpc.ServiceRegistrar, srv SJobServer) {
	s.RegisterService(&SJob_ServiceDesc, srv)
}

func _SJob_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SerchJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SJobServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SJob/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SJobServer).Login(ctx, req.(*SerchJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SJob_ServiceDesc is the grpc.ServiceDesc for SJob service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SJob_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.SJob",
	HandlerType: (*SJobServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _SJob_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/job.proto",
}
