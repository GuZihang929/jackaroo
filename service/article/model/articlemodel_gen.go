// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	articleFieldNames          = builder.RawFieldNames(&Article{})
	articleRows                = strings.Join(articleFieldNames, ",")
	articleRowsExpectAutoSet   = strings.Join(stringx.Remove(articleFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	articleRowsWithPlaceHolder = strings.Join(stringx.Remove(articleFieldNames, "`uuid`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheArticleUuidPrefix = "cache:article:uuid:"
)

type (
	articleModel interface {
		Insert(ctx context.Context, data *Article) (sql.Result, error)
		FindOne(ctx context.Context, uuid int64) (*Article, error)
		FindOneByUuid(ctx context.Context, uuid int64) (*Article, error)
		Update(ctx context.Context, data *Article) error
		Delete(ctx context.Context, uuid int64) error
	}

	defaultArticleModel struct {
		sqlc.CachedConn
		table string
	}

	Article struct {
		Uuid    int64          `db:"uuid"`
		UserId  int64          `db:"user_id"`
		Name    string         `db:"name"` // 文章名
		Info    sql.NullString `db:"info"`
		Tag     sql.NullString `db:"tag"` // 标签，分类
		Time    time.Time      `db:"time"`
		LikeSum sql.NullInt64  `db:"like_sum"`
	}
)

func newArticleModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultArticleModel {
	return &defaultArticleModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`article`",
	}
}

func (m *defaultArticleModel) withSession(session sqlx.Session) *defaultArticleModel {
	return &defaultArticleModel{
		CachedConn: m.CachedConn.WithSession(session),
		table:      "`article`",
	}
}

func (m *defaultArticleModel) Delete(ctx context.Context, uuid int64) error {
	data, err := m.FindOne(ctx, uuid)
	if err != nil {
		return err
	}

	articleUuidKey := fmt.Sprintf("%s%v", cacheArticleUuidPrefix, data.Uuid)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `uuid` = ?", m.table)
		return conn.ExecCtx(ctx, query, uuid)
	}, articleUuidKey)
	return err
}

func (m *defaultArticleModel) FindOne(ctx context.Context, uuid int64) (*Article, error) {
	articleUuidKey := fmt.Sprintf("%s%v", cacheArticleUuidPrefix, uuid)
	var resp Article
	err := m.QueryRowCtx(ctx, &resp, articleUuidKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `uuid` = ? limit 1", articleRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, uuid)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultArticleModel) FindOneByUuid(ctx context.Context, uuid int64) (*Article, error) {
	articleUuidKey := fmt.Sprintf("%s%v", cacheArticleUuidPrefix, uuid)
	var resp Article
	err := m.QueryRowIndexCtx(ctx, &resp, articleUuidKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `uuid` = ? limit 1", articleRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, uuid); err != nil {
			return nil, err
		}
		return resp.Uuid, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultArticleModel) Insert(ctx context.Context, data *Article) (sql.Result, error) {
	articleUuidKey := fmt.Sprintf("%s%v", cacheArticleUuidPrefix, data.Uuid)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, articleRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Uuid, data.UserId, data.Name, data.Info, data.Tag, data.Time, data.LikeSum)
	}, articleUuidKey)
	return ret, err
}

func (m *defaultArticleModel) Update(ctx context.Context, newData *Article) error {
	data, err := m.FindOne(ctx, newData.Uuid)
	if err != nil {
		return err
	}

	articleUuidKey := fmt.Sprintf("%s%v", cacheArticleUuidPrefix, data.Uuid)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `uuid` = ?", m.table, articleRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.UserId, newData.Name, newData.Info, newData.Tag, newData.Time, newData.LikeSum, newData.Uuid)
	}, articleUuidKey)
	return err
}

func (m *defaultArticleModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheArticleUuidPrefix, primary)
}

func (m *defaultArticleModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `uuid` = ? limit 1", articleRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultArticleModel) tableName() string {
	return m.table
}
