// Code generated by goctl. DO NOT EDIT.
// Source: article.proto

package article

import (
	"context"

	"article/rpc/rpc"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)
type (
	AddArtRequest     = rpc.AddArtRequest
	AddArtResponse    = rpc.AddArtResponse
	Art               = rpc.Art
	ArtRequest        = rpc.ArtRequest
	ArtResponse       = rpc.ArtResponse
	ArtsRequest       = rpc.ArtsRequest
	ArtsResponse      = rpc.ArtsResponse
	DelArtRequest     = rpc.DelArtRequest
	DelArtResponse    = rpc.DelArtResponse
	MyArtRequest      = rpc.MyArtRequest
	MyArtResponse     = rpc.MyArtResponse
	UpdateArtRequest  = rpc.UpdateArtRequest
	UpdateArtResponse = rpc.UpdateArtResponse

	Article interface {
		Articles(ctx context.Context, in *ArtsRequest, opts ...grpc.CallOption) (*ArtsResponse, error)
		Article(ctx context.Context, in *ArtRequest, opts ...grpc.CallOption) (*ArtResponse, error)
		AddMyArticle(ctx context.Context, in *AddArtRequest, opts ...grpc.CallOption) (*AddArtResponse, error)
		MyArticle(ctx context.Context, in *MyArtRequest, opts ...grpc.CallOption) (*MyArtResponse, error)
		UpdateArticle(ctx context.Context, in *UpdateArtRequest, opts ...grpc.CallOption) (*UpdateArtResponse, error)
		DelArticle(ctx context.Context, in *DelArtRequest, opts ...grpc.CallOption) (*DelArtResponse, error)
	}

	defaultArticle struct {
		cli zrpc.Client
	}
)

func NewArticle(cli zrpc.Client) Article {
	return &defaultArticle{
		cli: cli,
	}
}

func (m *defaultArticle) Articles(ctx context.Context, in *ArtsRequest, opts ...grpc.CallOption) (*ArtsResponse, error) {
	client := rpc.NewArticleClient(m.cli.Conn())
	return client.Articles(ctx, in, opts...)
}

func (m *defaultArticle) Article(ctx context.Context, in *ArtRequest, opts ...grpc.CallOption) (*ArtResponse, error) {
	client := rpc.NewArticleClient(m.cli.Conn())
	return client.Article(ctx, in, opts...)
}

func (m *defaultArticle) AddMyArticle(ctx context.Context, in *AddArtRequest, opts ...grpc.CallOption) (*AddArtResponse, error) {
	client := rpc.NewArticleClient(m.cli.Conn())
	return client.AddMyArticle(ctx, in, opts...)
}

func (m *defaultArticle) MyArticle(ctx context.Context, in *MyArtRequest, opts ...grpc.CallOption) (*MyArtResponse, error) {
	client := rpc.NewArticleClient(m.cli.Conn())
	return client.MyArticle(ctx, in, opts...)
}

func (m *defaultArticle) UpdateArticle(ctx context.Context, in *UpdateArtRequest, opts ...grpc.CallOption) (*UpdateArtResponse, error) {
	client := rpc.NewArticleClient(m.cli.Conn())
	return client.UpdateArticle(ctx, in, opts...)
}

func (m *defaultArticle) DelArticle(ctx context.Context, in *DelArtRequest, opts ...grpc.CallOption) (*DelArtResponse, error) {
	client := rpc.NewArticleClient(m.cli.Conn())
	return client.DelArticle(ctx, in, opts...)
}
