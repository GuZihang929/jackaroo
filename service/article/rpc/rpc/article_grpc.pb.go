// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: rpc/article.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ArticleClient is the client API for Article service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArticleClient interface {
	Articles(ctx context.Context, in *ArtsRequest, opts ...grpc.CallOption) (*ArtsResponse, error)
	Article(ctx context.Context, in *ArtRequest, opts ...grpc.CallOption) (*ArtResponse, error)
	AddMyArticle(ctx context.Context, in *AddArtRequest, opts ...grpc.CallOption) (*AddArtResponse, error)
	MyArticle(ctx context.Context, in *MyArtRequest, opts ...grpc.CallOption) (*MyArtResponse, error)
	UpdateArticle(ctx context.Context, in *UpdateArtRequest, opts ...grpc.CallOption) (*UpdateArtResponse, error)
	DelArticle(ctx context.Context, in *DelArtRequest, opts ...grpc.CallOption) (*DelArtResponse, error)
}

type articleClient struct {
	cc grpc.ClientConnInterface
}

func NewArticleClient(cc grpc.ClientConnInterface) ArticleClient {
	return &articleClient{cc}
}

func (c *articleClient) Articles(ctx context.Context, in *ArtsRequest, opts ...grpc.CallOption) (*ArtsResponse, error) {
	out := new(ArtsResponse)
	err := c.cc.Invoke(ctx, "/rpc.Article/Articles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) Article(ctx context.Context, in *ArtRequest, opts ...grpc.CallOption) (*ArtResponse, error) {
	out := new(ArtResponse)
	err := c.cc.Invoke(ctx, "/rpc.Article/Article", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) AddMyArticle(ctx context.Context, in *AddArtRequest, opts ...grpc.CallOption) (*AddArtResponse, error) {
	out := new(AddArtResponse)
	err := c.cc.Invoke(ctx, "/rpc.Article/AddMyArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) MyArticle(ctx context.Context, in *MyArtRequest, opts ...grpc.CallOption) (*MyArtResponse, error) {
	out := new(MyArtResponse)
	err := c.cc.Invoke(ctx, "/rpc.Article/MyArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) UpdateArticle(ctx context.Context, in *UpdateArtRequest, opts ...grpc.CallOption) (*UpdateArtResponse, error) {
	out := new(UpdateArtResponse)
	err := c.cc.Invoke(ctx, "/rpc.Article/UpdateArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articleClient) DelArticle(ctx context.Context, in *DelArtRequest, opts ...grpc.CallOption) (*DelArtResponse, error) {
	out := new(DelArtResponse)
	err := c.cc.Invoke(ctx, "/rpc.Article/DelArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArticleServer is the server API for Article service.
// All implementations must embed UnimplementedArticleServer
// for forward compatibility
type ArticleServer interface {
	Articles(context.Context, *ArtsRequest) (*ArtsResponse, error)
	Article(context.Context, *ArtRequest) (*ArtResponse, error)
	AddMyArticle(context.Context, *AddArtRequest) (*AddArtResponse, error)
	MyArticle(context.Context, *MyArtRequest) (*MyArtResponse, error)
	UpdateArticle(context.Context, *UpdateArtRequest) (*UpdateArtResponse, error)
	DelArticle(context.Context, *DelArtRequest) (*DelArtResponse, error)
	mustEmbedUnimplementedArticleServer()
}

// UnimplementedArticleServer must be embedded to have forward compatible implementations.
type UnimplementedArticleServer struct {
}

func (UnimplementedArticleServer) Articles(context.Context, *ArtsRequest) (*ArtsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Articles not implemented")
}
func (UnimplementedArticleServer) Article(context.Context, *ArtRequest) (*ArtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Article not implemented")
}
func (UnimplementedArticleServer) AddMyArticle(context.Context, *AddArtRequest) (*AddArtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMyArticle not implemented")
}
func (UnimplementedArticleServer) MyArticle(context.Context, *MyArtRequest) (*MyArtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MyArticle not implemented")
}
func (UnimplementedArticleServer) UpdateArticle(context.Context, *UpdateArtRequest) (*UpdateArtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArticle not implemented")
}
func (UnimplementedArticleServer) DelArticle(context.Context, *DelArtRequest) (*DelArtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelArticle not implemented")
}
func (UnimplementedArticleServer) mustEmbedUnimplementedArticleServer() {}

// UnsafeArticleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArticleServer will
// result in compilation errors.
type UnsafeArticleServer interface {
	mustEmbedUnimplementedArticleServer()
}

func RegisterArticleServer(s grpc.ServiceRegistrar, srv ArticleServer) {
	s.RegisterService(&Article_ServiceDesc, srv)
}

func _Article_Articles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArtsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).Articles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Article/Articles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).Articles(ctx, req.(*ArtsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_Article_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).Article(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Article/Article",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).Article(ctx, req.(*ArtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_AddMyArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddArtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).AddMyArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Article/AddMyArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).AddMyArticle(ctx, req.(*AddArtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_MyArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyArtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).MyArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Article/MyArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).MyArticle(ctx, req.(*MyArtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_UpdateArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateArtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).UpdateArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Article/UpdateArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).UpdateArticle(ctx, req.(*UpdateArtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Article_DelArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelArtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServer).DelArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Article/DelArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServer).DelArticle(ctx, req.(*DelArtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Article_ServiceDesc is the grpc.ServiceDesc for Article service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Article_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Article",
	HandlerType: (*ArticleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Articles",
			Handler:    _Article_Articles_Handler,
		},
		{
			MethodName: "Article",
			Handler:    _Article_Article_Handler,
		},
		{
			MethodName: "AddMyArticle",
			Handler:    _Article_AddMyArticle_Handler,
		},
		{
			MethodName: "MyArticle",
			Handler:    _Article_MyArticle_Handler,
		},
		{
			MethodName: "UpdateArticle",
			Handler:    _Article_UpdateArticle_Handler,
		},
		{
			MethodName: "DelArticle",
			Handler:    _Article_DelArticle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/article.proto",
}
